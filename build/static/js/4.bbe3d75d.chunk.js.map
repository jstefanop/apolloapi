{"version":3,"sources":["views/Widgets/DashboardWidget.js","views/Pools/PoolsTable/index.js","views/Pools/PoolsTable/PoolsTable.js","views/Dashboard/Dashboard.js","views/Dashboard/index.js"],"names":["DashboardWidget","props","_this","Object","_Users_prophet_Projects_FutureBit_apolloui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_prophet_Projects_FutureBit_apolloui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_prophet_Projects_FutureBit_apolloui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","updateDimensions","widgets","ReactDOM","findDOMNode","_Users_prophet_Projects_FutureBit_apolloui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","getElementsByClassName","smallWidth","offsetWidth","widgetClasses","state","setState","wrapSecondary","replace","window","addEventListener","removeEventListener","_this$props","hideProgress","hideSecondaryValue","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_8__","className","bgColor","icon","value","title","concat","color","progressColor","progressValue","secondaryTitle","secondaryValue","Component","PoolsTable","pools","mainHashrate","utility","data","_","sortBy","node_modules_react_default","react","_ref","i18n","reactstrap_es","responsive","id","map","pool","index","key","url","user","priority","stratumActive","status","quota","length","displayHashrate","lastShareTime","moment","to","accepted","rejected","discarded","getworks","Dashboard","minerCheck","minerError","mcuError","mcu","miner","settings","minerpercentageRejected","stats","summary","deviceRejected","minerpercentageError","deviceHardware","errorsColor","minerUptime","subtract","elapsed","mainPool","find","o","lastShare","lastShareColor","timestamp","format","diffLastShare","online","Loading","show","bg","centerTitle","subtitle","error","log","bfgminerLog","centerSubtitle","showBtn","showProgress","ref","xs","md","xl","workUtility","convertTemp","minerTemperature","temperatureUnit","tempColor","Number","temperature","toFixed","Math","round","devs","lastShareDifficulty","hardwareErrors","Pools_PoolsTable","minerModeIcon","minerMode","voltage","frequency","minerFanSpeed","btnTo","btnText","connect","loadingMcu","mcuStats","loading","loadingMiner","minerStats","loadingOnline","minerOnline"],"mappings":"oLAQMA,cACJ,SAAAA,EAAaC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,iBAAmB,WACjB,IAAMC,EAAUC,IAASC,YAATT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAA2BY,uBAAuB,UAC5DC,EAAcL,EAAQ,IAAMA,EAAQ,GAAGM,aAAeN,EAAQ,GAAGM,aAAe,MAAQ,EAC1FC,EAAgBf,EAAKgB,MAAMD,cAE3BF,IAAcE,GAAiB,gBACnCf,EAAKiB,SAAS,CAAEF,cAAeA,KAd/B,IAAIA,EAAgB,0CAJF,OAKdhB,GAASA,EAAMmB,gBACjBH,EAAgBA,EAAcI,QAAQ,gBAAiB,cAGzDnB,EAAKgB,MAAQ,CAAED,cAAeA,GATZf,mFAsBlBG,KAAKI,mBACLa,OAAOC,iBAAiB,SAAUlB,KAAKI,iEAIvCa,OAAOE,oBAAoB,SAAUnB,KAAKI,mDAGnC,IAAAgB,EAEsCpB,KAAKJ,MAA1CyB,EAFDD,EAECC,aAAcC,EAFfF,EAEeE,mBAEtB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAW3B,KAAKJ,MAAMgC,SAC1BL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,UAAU,UAClBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BAA4BJ,EAAAC,EAAAC,cAAA,KAAGE,UAAW3B,KAAKJ,MAAMiC,KAAO,gBAC3EN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAU3B,KAAKJ,MAAMkC,OACpCP,EAAAC,EAAAC,cAAA,WAAMzB,KAAKJ,MAAMmC,OACjBR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,UAAS,oBAAAK,OAAsBX,EAAe,YAAc,IAAMY,MAAOjC,KAAKJ,MAAMsC,cAAeJ,MAAO9B,KAAKJ,MAAMuC,gBAC/HZ,EAAAC,EAAAC,cAAA,SAAOE,UAAW3B,KAAKa,MAAMD,eAC1BZ,KAAKJ,MAAMwC,eAAgBd,EAAqB,KAAO,IAD1D,IAC+DC,EAAAC,EAAAC,cAAA,SAAIzB,KAAKJ,MAAMyC,0BA3C1DC,aAmDf3C,6LCzDA4C,mLCaJ,IAAAnB,EACoBpB,KAAKJ,MAAxB4C,EADDpB,EACCoB,MACFC,EAA0B,SAFzBrB,EACQsB,QAKf,OAFAF,EAAMG,KAAOC,IAAEC,OAAOL,EAAMG,KAAM,YAGhCG,EAAAtB,EAAAC,cAACsB,EAAA,KAAD,KACG,SAAAC,KAAGC,KAAH,OACCH,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAOC,YAAU,EAACxB,UAAU,oCAC1BmB,EAAAtB,EAAAC,cAAA,SAAOE,UAAU,YACfmB,EAAAtB,EAAAC,cAAA,UACEqB,EAAAtB,EAAAC,cAAA,UAAIqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,SACJN,EAAAtB,EAAAC,cAAA,UAAIqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,UACJN,EAAAtB,EAAAC,cAAA,UAAIqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,YACJN,EAAAtB,EAAAC,cAAA,UAAIqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,YACJN,EAAAtB,EAAAC,cAAA,UAAIqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,WACJN,EAAAtB,EAAAC,cAAA,UAAIqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,cACJN,EAAAtB,EAAAC,cAAA,wBACAqB,EAAAtB,EAAAC,cAAA,iBACAqB,EAAAtB,EAAAC,cAAA,iBACAqB,EAAAtB,EAAAC,cAAA,iBACAqB,EAAAtB,EAAAC,cAAA,iBACAqB,EAAAtB,EAAAC,cAAA,MAAIE,UAAU,eAAcmB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,gBAGhCN,EAAAtB,EAAAC,cAAA,SAAOE,UAAU,YACba,EAAMG,KAAKU,IAAI,SAASC,EAAMC,GAC9B,OAAOT,EAAAtB,EAAAC,cAAA,MAAI+B,IAAKD,GACZT,EAAAtB,EAAAC,cAAA,UACEqB,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,+BAAgC2B,EAAKG,MAEtDX,EAAAtB,EAAAC,cAAA,MAAIE,UAAU,IACZmB,EAAAtB,EAAAC,cAAA,MAAIE,UAAU,QACK,iBAAd2B,EAAKI,KACNZ,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAOjB,MAAM,WAAb,YAEAa,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAOjB,MAASqB,EAAKK,SAAuB,QAAZ,WAAyBL,EAAKK,SAAoB,WAAT,UAG/Eb,EAAAtB,EAAAC,cAAA,MAAIE,UAAU,IACZmB,EAAAtB,EAAAC,cAAA,MAAIE,UAAU,QAAOmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAOjB,MAAQqB,EAAKM,cAAgB,UAAY,SAAYN,EAAKM,cAAgB,SAAW,cAEnHd,EAAAtB,EAAAC,cAAA,UACEqB,EAAAtB,EAAAC,cAAA,MAAIE,UAAU,QAAOmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAOjB,MAAwB,UAAhBqB,EAAKO,OAAqB,UAAY,UAAaP,EAAKO,UAE9Ff,EAAAtB,EAAAC,cAAA,UACEqB,EAAAtB,EAAAC,cAAA,MAAIE,UAAU,QAAS2B,EAAKQ,MAAQR,EAAKQ,MAAQ,IAAM,aAEzDhB,EAAAtB,EAAAC,cAAA,UACG6B,EAAKM,cACNd,EAAAtB,EAAAC,cAAA,MAAIE,UAAU,yBACZmB,EAAAtB,EAAAC,cAAA,KAAGE,UAAU,8BADf,IACmD2B,EAAKQ,MAAQ,GAAKtB,EAAMG,MAAQH,EAAMG,KAAKoB,OAAS,EAAKC,YAAiBvB,EAAea,EAAKQ,MAAQ,IAAM,KAAOE,YAAgBvB,EAAc,MAGpMK,EAAAtB,EAAAC,cAAA,2BAGFqB,EAAAtB,EAAAC,cAAA,UACI6B,EAAKW,cAAgBC,MAASC,GAAGD,IAAOZ,EAAKW,cAAe,MAAQ,SAExEnB,EAAAtB,EAAAC,cAAA,UACI6B,EAAKc,UAETtB,EAAAtB,EAAAC,cAAA,UACI6B,EAAKe,UAETvB,EAAAtB,EAAAC,cAAA,UACI6B,EAAKgB,WAETxB,EAAAtB,EAAAC,cAAA,UACI6B,EAAKiB,UAETzB,EAAAtB,EAAAC,cAAA,MAAIE,UAAU,eAA+B,iBAAd2B,EAAKI,KAA2BZ,EAAAtB,EAAAC,cAAA,KAAGE,UAAU,eAAkB2B,EAAKI,oBA3E9FpB,aCOnBkC,mLAEK,IAAApD,EAC4DpB,KAAKJ,MAAhE6E,EADDrD,EACCqD,WAAYC,EADbtD,EACasD,WAAYC,EADzBvD,EACyBuD,SAAUC,EADnCxD,EACmCwD,IAAKC,EADxCzD,EACwCyD,MAAOC,EAD/C1D,EAC+C0D,SAGhDC,EAA0BF,EAAMG,MAAMC,QAAQtC,KAAKuC,eACnDC,EAAuBN,EAAMG,MAAMC,QAAQtC,KAAKyC,eAClDC,EAAc,UACdF,GAAwB,GAAKA,GAAwB,IAAKE,EAAc,UACnEF,EAAuB,MAAKE,EAAc,UAGnD,IAAMC,EAAcpB,MAASC,GAAGD,MAASqB,SAASV,EAAMG,MAAMC,QAAQtC,KAAK6C,QAAS,YAAY,GAG1FC,EAAW7C,IAAE8C,KAAKb,EAAMG,MAAMxC,MAAMG,KAAM,SAASgD,GAAK,OAAOA,EAAE1B,cAAgB,IAAyB,IAApB0B,EAAE/B,gBAG1FgC,EAAY,gBACZ3B,EAAgB,EAChB4B,EAAiB,UACfC,EAAY5B,MAAS6B,OAAO,KAC9BN,GAAYA,EAASxB,gBACvB2B,EAAY1B,MAASC,GAAGD,IAAOuB,EAASxB,cAAe,MACvDA,EAAgBwB,EAASxB,eAE3B,IAAM+B,EAAgBF,EAAY7B,EAIlC,OAHI+B,GAAiB,KAAOA,GAAiB,IAAKH,EAAiB,UAC1DG,EAAgB,MAAKH,EAAiB,UAE1CpB,EAAWwB,OAAOpC,OAkBnBa,EAEA5B,EAAAtB,EAAAC,cAACyE,EAAA,EAAD,CACEC,MAAM,EACNC,GAAG,OACHrE,MAAM,kFACNsE,aAAa,EACbC,SAAS,yHACTC,MAAQ7B,EACR8B,IAAM5B,EAAII,MAAMyB,YAChBC,gBAAgB,EAChB7E,KAAK,wCACL8E,SAAS,EACTC,cAAe,IAMnB9D,EAAAtB,EAAAC,cAAA,OAAKoF,IAAI,QACJlC,EACC7B,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAOjB,MAAM,WAAb,6CAAiEa,EAAAtB,EAAAC,cAAA,SAAKkD,GAAtE,KACA,KAEJ7B,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,mBACbmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAAC9B,EAAA,EAAD,CACEiC,QAAQ,UACRC,KAAK,aACLC,MAAQkC,YAAuD,SAAvCa,EAAMG,MAAMC,QAAQtC,KAAKsE,YAAwB,KACzElF,MAAM,mBACNG,cAAc,UACdC,cAAc,MACdC,eAAe,OACfC,eAAiBoD,GAAYA,EAAShC,IAAOgC,EAAShC,IAAM,oBAIhEX,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAAC9B,EAAA,EAAD,CACEiC,QAAQ,UACRC,KAAK,yBACLC,MAAQoF,YAAYtC,EAAII,MAAMmC,iBAAkBrC,EAASsC,iBAAiB,GAC1ErF,MAAM,oBACNG,cAAgBmF,YAAUH,YAAYtC,EAAII,MAAMmC,iBAAkB,MAClEhF,cAAgB+E,YAAYtC,EAAII,MAAMmC,iBAAkBrC,EAASsC,iBACjEhF,eAAe,kBACfC,eAAiB6E,YAAaI,OAAO1C,EAAII,MAAMuC,aAAe,IAAOzC,EAASsC,iBAAiB,MAInGtE,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAAC9B,EAAA,EAAD,CACEiC,QAAQ,cACRC,KAAK,6BACLC,MAAQqD,EAAqBqC,QAAQ,GAAK,IAC1CzF,MAAM,kBACNG,cAAgBmD,EAChBlD,cAAuC,GAAvBgD,EAChB/C,eAAe,WACfC,eAAiB0C,KAIrBjC,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAAC9B,EAAA,EAAD,CACEiC,QAAQ,cACRC,KAAK,cACLC,MAAQwD,EACRvD,MAAM,eACNG,cAAgB2D,EAChB1D,cAAgB,IAChBC,eAAe,aACfC,eAAiBuD,MAKvB9C,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAU,YACdmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,UAAWkD,EAAMG,MAAMC,QAAQtC,KAAKyB,UACnDtB,EAAAtB,EAAAC,cAAA,WAAKqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,iBAKXN,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAU,YACdmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,UAAWkD,EAAMG,MAAMC,QAAQtC,KAAK0B,UACnDvB,EAAAtB,EAAAC,cAAA,WAAKqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,iBAKXN,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAU,YACdmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,UAAW8F,KAAKC,MAAqD,MAA/C7C,EAAMG,MAAM2C,KAAKhF,KAAK,GAAGiF,sBAC9D9E,EAAAtB,EAAAC,cAAA,WAAKqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,mBAKXN,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAU,YACdmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,UAAWkD,EAAMG,MAAMC,QAAQtC,KAAKkF,gBACnD/E,EAAAtB,EAAAC,cAAA,WAAKqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,oBAOfN,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,mBACbmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAAA,UAAIqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,WACJN,EAAAtB,EAAAC,cAAA,WACEqB,EAAAtB,EAAAC,cAACqG,EAAD,CAAYtF,MAAQqC,EAAMG,MAAMxC,MAAQE,QAAUmC,EAAMG,MAAMC,QAAQtC,KAAKsE,kBAMnFnE,EAAAtB,EAAAC,cAAA,WACEqB,EAAAtB,EAAAC,cAAA,UAAIqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,cACJN,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAU,YACdmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,6BAA4BmB,EAAAtB,EAAAC,cAAA,KAAGE,UAAYoG,YAAcjD,EAASkD,WAAa,mBAC9FlF,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,yBAA0BmD,EAASkD,WAAa,WAC/DlF,EAAAtB,EAAAC,cAAA,WAAKqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,mBAKXN,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAU,YACdmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,6BAA4BmB,EAAAtB,EAAAC,cAAA,KAAGE,UAAU,0BACxDmB,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,UACa,WAAvBmD,EAASkD,UACVlF,EAAAtB,EAAAC,cAAA,YAAOqD,EAASmD,SAAW,EAA3B,IAA+BnF,EAAAtB,EAAAC,cAAA,SAAOE,UAAU,aAAjB,OAC7BmB,EAAAtB,EAAAC,cAAA,qBAGNqB,EAAAtB,EAAAC,cAAA,WAAKqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,sBAKXN,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAU,YACdmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,6BAA4BmB,EAAAtB,EAAAC,cAAA,KAAGE,UAAU,qCACxDmB,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,UACa,WAAvBmD,EAASkD,UACVlF,EAAAtB,EAAAC,cAAA,YAAOqD,EAASoD,WAAa,EAA7B,IAAiCpF,EAAAtB,EAAAC,cAAA,SAAOE,UAAU,aAAjB,QAC/BmB,EAAAtB,EAAAC,cAAA,qBAGNqB,EAAAtB,EAAAC,cAAA,WAAKqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,wBAKXN,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAK4D,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrBlE,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAU,YACdmB,EAAAtB,EAAAC,cAACyB,EAAA,EAAD,KACEJ,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,6BAA4BmB,EAAAtB,EAAAC,cAAA,KAAGE,UAAU,0BACxDmB,EAAAtB,EAAAC,cAAA,OAAKE,UAAU,UAAWiD,EAAII,MAAMmD,cAApC,IAAoDrF,EAAAtB,EAAAC,cAAA,SAAOE,UAAU,aAAjB,QACpDmB,EAAAtB,EAAAC,cAAA,WAAKqB,EAAAtB,EAAAC,cAACsB,EAAA,MAAD,CAAAK,GAAA,qBAjMfN,EAAAtB,EAAAC,cAACyE,EAAA,EAAD,CACEC,MAAO,EACPC,GAAG,OACHrE,MAAM,mBACNsE,aAAc,EACdC,SAAS,kBACTC,OAAQ,EACRG,gBAAiB,EACjB7E,KAAK,gCACL8E,SAAU,EACVyB,MAAM,eACNC,QAAQ,iBA5CM/F,aA4PTgG,oBAdS,SAAAzH,GACtB,MAAO,CACL0H,WAAY1H,EAAM2H,SAASC,QAC3B7D,IAAK/D,EAAM2H,SAAS7F,KACpBgC,SAAU9D,EAAM2H,SAASjC,MACzBmC,aAAc7H,EAAM8H,WAAWF,QAC/B5D,MAAOhE,EAAM8H,WAAWhG,KACxB+B,WAAY7D,EAAM8H,WAAWpC,MAC7BqC,cAAe/H,EAAMgI,YAAYJ,QACjChE,WAAY5D,EAAMgI,YAAYlG,KAC9BmC,SAAUjE,EAAMiE,WAILwD,CAAyB9D,GC9QzBA","file":"static/js/4.bbe3d75d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Card,\n  CardBody,\n  Progress\n} from 'reactstrap';\n\nclass DashboardWidget extends Component {\n  constructor (props) {\n    super(props);\n\n    // If optional wrapSeconary present, replace text-truncate with text-wrap\n    let widgetClasses = 'd-inline-block text-muted text-truncate';\n    if (props && props.wrapSecondary) {\n      widgetClasses = widgetClasses.replace('text-truncate', 'text-wrap');\n    }\n\n    this.state = { widgetClasses: widgetClasses };\n  }\n\n  updateDimensions = () => {\n    const widgets = ReactDOM.findDOMNode(this).getElementsByClassName('widget');\n    const smallWidth = (widgets[0] && widgets[0].offsetWidth && widgets[0].offsetWidth <= 280) || false;\n    let widgetClasses = this.state.widgetClasses;\n\n    if (smallWidth) { widgetClasses += ' small-width'; }\n    this.setState({ widgetClasses: widgetClasses });\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  render() {\n    // Optional parameters to improve component reusability\n    const { hideProgress, hideSecondaryValue } = this.props;\n\n    return (\n      <Card className={this.props.bgColor}>\n        <CardBody className=\"widget\">\n          <div className=\"h1 text-muted float-right\"><i className={this.props.icon + ' text-gray'}></i></div>\n          <div className=\"h4 m-0\">{this.props.value}</div>\n          <div>{this.props.title}</div>\n          <Progress className={`progress-xs my-3 ${hideProgress ? 'invisible' : ''}`} color={this.props.progressColor} value={this.props.progressValue} />\n          <small className={this.state.widgetClasses}>\n            {this.props.secondaryTitle}{hideSecondaryValue ? null : ':'} <b>{this.props.secondaryValue}</b>\n          </small>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default DashboardWidget;\n","import PoolsTable from './PoolsTable'\n\nexport default PoolsTable","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport {\n  Table,\n  Badge\n} from 'reactstrap';\n\nimport { displayHashrate } from '../../Filters';\nimport moment from 'moment';\n\nimport { Trans } from '@lingui/macro';\nimport { I18n } from \"@lingui/react\"\n\nclass PoolsTable extends Component {\n\n  render() {\n    const { pools, utility } = this.props;\n    const mainHashrate = (utility * 71582788);\n\n    pools.data = _.sortBy(pools.data, 'priority');\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Table responsive className=\"table-outline d-table d-sm-table\">\n            <thead className=\"bg-light\">\n              <tr>\n                <th><Trans>Url</Trans></th>\n                <th><Trans>Type</Trans></th>\n                <th><Trans>Active</Trans></th>\n                <th><Trans>Status</Trans></th>\n                <th><Trans>Quota</Trans></th>\n                <th><Trans>Hashrate</Trans></th>\n                <th>Last share</th>\n                <th>Acc</th>\n                <th>Rej</th>\n                <th>Dis</th>\n                <th>Get</th>\n                <th className=\"text-center\"><Trans>Username</Trans></th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white\">\n              { pools.data.map(function(pool, index) {\n                return <tr key={index}>\n                    <td>\n                      <div className=\"font-weight-bold text-muted\">{ pool.url }</div>\n                    </td>\n                    <td className=\"\">\n                      <h5 className=\"mb-0\">\n                        { (pool.user === 'jstefanop.a1') ?\n                          <Badge color=\"warning\">Donation</Badge>\n                        :\n                          <Badge color={ !pool.priority ? 'primary' : 'light' }>{ !pool.priority ? 'Main' : 'Failover' }</Badge> }\n                      </h5>\n                    </td>\n                    <td className=\"\">\n                      <h5 className=\"mb-0\"><Badge color={ pool.stratumActive ? 'success' : 'light' }>{ pool.stratumActive ? 'Active' : 'Inactive' }</Badge></h5>\n                    </td>\n                    <td>\n                      <h5 className=\"mb-0\"><Badge color={ pool.status === 'Alive' ? 'success' : 'danger' }>{ pool.status }</Badge></h5>\n                    </td>\n                    <td>\n                      <h6 className=\"mb-0\">{ pool.quota ? pool.quota + '%' : 'No quota'}</h6>\n                    </td>\n                    <td>\n                    { (pool.stratumActive) ? \n                      <h6 className=\"mb-0 font-weight-bold\">\n                        <i className=\"fa fa-fire text-secondary\"></i> { (pool.quota > 0 && pools.data && pools.data.length > 1) ? displayHashrate((mainHashrate * pool.quota / 100), 'h') : displayHashrate(mainHashrate, 'h') }\n                      </h6>\n                      :\n                      <span>Not active</span>\n                    }\n                    </td>\n                    <td>\n                      { pool.lastShareTime ? moment().to(moment(pool.lastShareTime, 'X')) : 'Never' }\n                    </td>\n                    <td>\n                      { pool.accepted }\n                    </td>\n                    <td>\n                      { pool.rejected }\n                    </td>\n                    <td>\n                      { pool.discarded }\n                    </td>\n                    <td>\n                      { pool.getworks }\n                    </td>\n                    <td className=\"text-center\">{ (pool.user === 'jstefanop.a1') ? <i className=\"fa fa-gift\" /> : pool.user }</td>\n                  </tr>\n              })}\n            </tbody>\n          </Table>\n        )}\n      </I18n>\n    );\n  }\n}\n\nexport default PoolsTable;\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react';\nimport {\n  Alert,\n  Card,\n  CardBody,\n  Col,\n  Row\n} from 'reactstrap';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport { LoadingErrorBox } from '../Loading';\nimport DashboardWidget from '../Widgets/DashboardWidget';\nimport { convertTemp, displayHashrate, minerModeIcon, tempColor } from '../Filters';\nimport PoolsTable from '../Pools/PoolsTable';\n\nimport { Trans } from '@lingui/macro';\n\nclass Dashboard extends Component {\n\n  render() {\n    const { minerCheck, minerError, mcuError, mcu, miner, settings } = this.props;\n\n    // Miner shares\n    const minerpercentageRejected = miner.stats.summary.data.deviceRejected;\n    const minerpercentageError = miner.stats.summary.data.deviceHardware;\n    let errorsColor = 'success';\n    if (minerpercentageError >= 5 && minerpercentageError <= 7.5) errorsColor = 'warning';\n    else if (minerpercentageError > 7.5) errorsColor = 'danger';\n\n    // Miner uptime\n    const minerUptime = moment().to(moment().subtract(miner.stats.summary.data.elapsed, 'seconds'), true);\n\n    // Active pool\n    const mainPool = _.find(miner.stats.pools.data, function(o) { return o.lastShareTime > 0 && o.stratumActive === true; });\n\n    // Last share\n    let lastShare = 'Not available',\n        lastShareTime = 0,\n        lastShareColor = 'success';\n    const timestamp = moment().format('X');\n    if (mainPool && mainPool.lastShareTime) {\n      lastShare = moment().to(moment(mainPool.lastShareTime, 'X'));\n      lastShareTime = mainPool.lastShareTime;\n    }\n    const diffLastShare = timestamp - lastShareTime;\n    if (diffLastShare >= 300 && diffLastShare <= 600) lastShareColor = 'warning';\n    else if (diffLastShare > 600) lastShareColor = 'danger'\n\n    if (!minerCheck.online.status) {\n      return (\n        <LoadingErrorBox \n          show={ true }\n          bg=\"bg-0\"\n          title=\"Miner is offline\"\n          centerTitle={ true }\n          subtitle=\"Try to start it\"\n          error={ false }\n          centerSubtitle={ true }\n          icon=\"fa-toggle-off animated bounce\"\n          showBtn={ true }\n          btnTo=\"/miner/start\"\n          btnText=\"Start\"\n        />\n      )\n    }\n\n    if (minerError) {\n      return (\n        <LoadingErrorBox \n          show={true}\n          bg=\"bg-0\"\n          title=\"It seems there is a problem to communicate with the miner, check error message.\"\n          centerTitle={true}\n          subtitle=\"Wait at least 1 minute, if problem persists, try to restart the miner, check the settings or try to reboot the system.\"\n          error={ minerError }\n          log={ mcu.stats.bfgminerLog }\n          centerSubtitle={true}\n          icon=\"fa-exclamation-circle animated bounce\"\n          showBtn={false}\n          showProgress={ false }\n        />\n      )\n    }\n\n    return (\n      <div ref=\"main\">\n        { (mcuError) ?\n            <Alert color=\"warning\">There is a problem fetching system stats (<b>{ mcuError }</b>)</Alert>\n          : null \n        }\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-dark\" \n                icon=\"fa fa-fire\" \n                value={ displayHashrate(miner.stats.summary.data.workUtility * 71582788, 'h') }\n                title=\"Current hashrate\"\n                progressColor=\"primary\"\n                progressValue=\"100\"\n                secondaryTitle=\"Pool\"\n                secondaryValue={(mainPool && mainPool.url) ? mainPool.url : 'Nothing active'}\n              ></DashboardWidget>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-info\" \n                icon=\"fa fa-thermometer-half\" \n                value={ convertTemp(mcu.stats.minerTemperature, settings.temperatureUnit, true) }\n                title=\"Miner temperature\"\n                progressColor={ tempColor(convertTemp(mcu.stats.minerTemperature, 'c')) }\n                progressValue={ convertTemp(mcu.stats.minerTemperature, settings.temperatureUnit) }\n                secondaryTitle=\"MCU temperature\"\n                secondaryValue={ convertTemp((Number(mcu.stats.temperature) / 1000), settings.temperatureUnit, true) }\n              ></DashboardWidget>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-gray-300\" \n                icon=\"fa fa-exclamation-triangle\" \n                value={ minerpercentageError.toFixed(1) + '%' }\n                title=\"Hardware errors\"\n                progressColor={ errorsColor }\n                progressValue={ minerpercentageError * 10 }\n                secondaryTitle=\"Rejected\"\n                secondaryValue={ minerpercentageRejected }\n              ></DashboardWidget>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <DashboardWidget \n                bgColor=\"bg-gray-200\" \n                icon=\"fa fa-clock\" \n                value={ minerUptime }\n                title=\"Miner uptime\"\n                progressColor={ lastShareColor }\n                progressValue={ 100 }\n                secondaryTitle=\"Last share\"\n                secondaryValue={ lastShare }\n              ></DashboardWidget>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{ miner.stats.summary.data.accepted }</div>\n                  <div><Trans>Accepted</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{ miner.stats.summary.data.rejected }</div>\n                  <div><Trans>Rejected</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{ Math.round(miner.stats.devs.data[0].lastShareDifficulty * 65535) }</div>\n                  <div><Trans>Difficulty</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{ miner.stats.summary.data.hardwareErrors }</div>\n                  <div><Trans>HW Errors</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n\n        <div className=\"animated fadeIn\">\n          <Row>\n            <Col>\n              <h4><Trans>Pools</Trans></h4>\n              <div>\n                <PoolsTable pools={ miner.stats.pools } utility={ miner.stats.summary.data.workUtility }></PoolsTable>\n              </div>\n            </Col>\n          </Row>\n        </div>\n\n        <div>\n          <h4><Trans>Settings</Trans></h4>        \n          <Row>\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className={ minerModeIcon(settings.minerMode) + ' fa text-gray'}></i></div>\n                  <div className=\"h4 m-0 text-uppercase\">{ settings.minerMode || 'Not set' }</div>\n                  <div><Trans>Miner mode</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-bolt text-gray\"></i></div>\n                  <div className=\"h4 m-0\">\n                    { (settings.minerMode === 'custom') ?\n                      <span>{settings.voltage || 0 } <small className=\"textmuted\">mV</small></span>\n                      : <span>Auto</span>\n                    }\n                  </div>\n                  <div><Trans>Miner voltage</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-broadcast-tower text-gray\"></i></div>\n                  <div className=\"h4 m-0\">\n                    { (settings.minerMode === 'custom') ?\n                      <span>{settings.frequency || 0 } <small className=\"textmuted\">MHz</small></span>\n                      : <span>Auto</span>\n                    }\n                  </div>\n                  <div><Trans>Miner frequency</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs=\"12\" md=\"6\" xl=\"3\">\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h1 text-muted float-right\"><i className=\"fa fa-wind text-gray\"></i></div>\n                  <div className=\"h4 m-0\">{ mcu.stats.minerFanSpeed } <small className=\"textmuted\">RPM</small></div>\n                  <div><Trans>Fan speed</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loadingMcu: state.mcuStats.loading,\n    mcu: state.mcuStats.data,\n    mcuError: state.mcuStats.error,\n    loadingMiner: state.minerStats.loading,\n    miner: state.minerStats.data,\n    minerError: state.minerStats.error,\n    loadingOnline: state.minerOnline.loading,\n    minerCheck: state.minerOnline.data,\n    settings: state.settings\n  }\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n","import Dashboard from './Dashboard'\n\nexport default Dashboard"],"sourceRoot":""}