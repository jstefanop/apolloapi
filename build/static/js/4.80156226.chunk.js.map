{"version":3,"sources":["views/Widgets/DashboardWidget.js","views/Node/Node.js","views/Node/index.js"],"names":["DashboardWidget","props","_this","Object","_Users_prophet_Projects_FutureBit_apolloui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_prophet_Projects_FutureBit_apolloui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_prophet_Projects_FutureBit_apolloui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","updateDimensions","widgets","ReactDOM","findDOMNode","_Users_prophet_Projects_FutureBit_apolloui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","getElementsByClassName","smallWidth","offsetWidth","widgetClasses","state","setState","window","addEventListener","removeEventListener","hideProgress","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_8__","className","bgColor","icon","value","title","concat","color","progressColor","progressValue","secondaryTitle","secondaryValue","Component","Node","_this$props","mcu","loadingNode","node","nodeError","stats","memory","total","react_default","ref","reactstrap_es","error","loadingErrorMessage","code","message","_node$stats","blockCount","connectionCount","miningInfo","peerInfo","xs","md","xl","networkhashps","toFixed","difficulty","_lingui_react","id","_ref","i18n","responsive","map","peer","index","key","addr","subver","connect","nodeStats","loading","mcuStats","data"],"mappings":"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","file":"static/js/4.80156226.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Card,\n  CardBody,\n  Progress\n} from 'reactstrap';\n\nclass DashboardWidget extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      widgetClasses: 'd-inline-block text-muted text-truncate'\n    }\n  }\n\n  updateDimensions = () => {\n    const widgets = ReactDOM.findDOMNode(this).getElementsByClassName('widget');\n    const smallWidth = (widgets[0] && widgets[0].offsetWidth && widgets[0].offsetWidth <= 280) || false;\n    let widgetClasses = this.state.widgetClasses;\n\n    if (smallWidth) widgetClasses += ' small-width'\n    else widgetClasses = 'd-inline-block text-muted text-truncate';\n\n    this.setState({ widgetClasses: widgetClasses });\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  render() {\n    const { hideProgress } = this.props;\n\n    return (\n      <Card className={this.props.bgColor}>\n        <CardBody className=\"widget\">\n          <div className=\"h1 text-muted float-right\"><i className={this.props.icon + ' text-gray'}></i></div>\n          <div className=\"h4 m-0\">{this.props.value}</div>\n          <div>{this.props.title}</div>\n          <Progress className={`progress-xs my-3 ${hideProgress ? 'invisible' : ''}`} color={this.props.progressColor} value={this.props.progressValue} />\n          <small className={this.state.widgetClasses}>{this.props.secondaryTitle}: <b>{this.props.secondaryValue}</b></small>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nexport default DashboardWidget;\n","import { connect } from 'react-redux'\nimport React, { Component } from 'react';\nimport {\n  Alert,\n  Card,\n  CardBody,\n  Col,\n  Row,\n  Table\n} from 'reactstrap';\n\nimport { I18n } from \"@lingui/react\";\nimport { Trans } from '@lingui/macro';\n\nimport DashboardWidget from '../Widgets/DashboardWidget';\n\nclass Node extends Component {\n  render() {\n    // TODO: Use loadingNode\n    const { loadingNode, mcu, node, nodeError } = this.props;\n\n    // If less memory than 500 MB, return Alert and prevent page load\n    if (mcu && mcu.stats && mcu.stats.memory && mcu.stats.memory.total && mcu.stats.memory.total < 500000) {\n      return (\n        <div ref='main'>\n          <Alert color='warning'>There is a problem fetching system stats (<b>MCU must have at least 512 MB of memory to view this page</b>)</Alert>\n        </div>\n      )\n    }\n\n    // Something is very wrong and likely not loading error\n    if (nodeError) {\n      return (\n        <div ref='main'>\n          <Alert color='warning'>There is a problem fetching system stats (<b>{nodeError}</b>)</Alert>\n        </div>\n      )\n    } else if (node && node.stats && node.stats.error) {\n      // Handle loading errors (e.g., Litecoin client off, loading, etc.)\n      let loadingErrorMessage = null\n      // If Litecoin client off, display constant message\n      if (node.stats.error.code === 'ECONNREFUSED') {\n        loadingErrorMessage = 'Node is currently offline'\n      } else if (node.stats.error.code === '-28') {\n        loadingErrorMessage = 'Node is currently loading'\n      } else {\n        // Every other loading error\n        loadingErrorMessage = node.stats.error.message\n      }\n\n      return (\n        <div ref='main'>\n          <Alert color='warning'>There is a problem fetching system stats (<b>{loadingErrorMessage}</b>)</Alert>\n        </div>\n      )\n    }\n\n    const { blockCount, connectionCount, miningInfo, peerInfo } = node.stats;\n\n    return (\n      <div ref='main'>\n        <div className='animated fadeIn'>\n          <Row>\n            <Col xs='12' md='6' xl='6'>\n              <DashboardWidget\n                bgColor='bg-light'\n                icon='fa fa-fire'\n                value={miningInfo.networkhashps && `${(miningInfo.networkhashps / 1000000000000).toFixed(2)} Th/s`}\n                title='Network Hashrate'\n                hideProgress={true}\n                progressColor='success'\n                progressValue={100}\n                secondaryTitle='Network Difficulty'\n                secondaryValue={miningInfo.difficulty && miningInfo.difficulty.toFixed(2)}\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs='12' md='6'>\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{blockCount}</div>\n                  <div><Trans>Blocks</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs='12' md='6'>\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{connectionCount}</div>\n                  <div><Trans>Connections</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <h4><Trans>Connections</Trans></h4>\n              <div>\n                <I18n>\n                  {({ i18n }) => (\n                    <Table responsive className=\"table-outline d-table d-sm-table\">\n                      <thead className=\"bg-light\">\n                        <tr>\n                          <th><Trans>IP</Trans></th>\n                          <th><Trans>Client</Trans></th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white\">\n                        {peerInfo.map(function(peer, index) {\n                          return (\n                            <tr key={index}>\n                              <td>\n                                <div className=\"font-weight-bold text-muted\">{peer.addr}</div>\n                              </td>\n                              <td>\n                                {peer.subver}\n                              </td>\n                            </tr>\n                          )\n                        })}\n                      </tbody>\n                    </Table>\n                  )}\n                </I18n>\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loadingNode: state.nodeStats.loading,\n    mcu: state.mcuStats.data,\n    node: state.nodeStats.data,\n    nodeError: state.nodeStats.error\n  }\n};\n\nexport default connect(mapStateToProps)(Node);\n","import Node from './Node'\n\nexport default Node\n"],"sourceRoot":""}