{"version":3,"sources":["views/Node/Node.js","views/Node/index.js"],"names":["Node","_this$props","this","props","mcu","loadingNode","node","nodeError","stats","memory","total","react_default","a","createElement","ref","reactstrap_es","color","error","loadingErrorMessage","code","message","className","xs","md","blockCount","_lingui_react","id","connectionCount","_ref","i18n","responsive","peerInfo","map","peer","index","key","addr","subver","Component","connect","state","nodeStats","loading","mcuStats","data"],"mappings":"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","file":"static/js/4.19e86656.chunk.js","sourcesContent":["import { connect } from 'react-redux'\nimport React, { Component } from 'react';\nimport {\n  Alert,\n  Card,\n  CardBody,\n  Col,\n  Row,\n  Table\n} from 'reactstrap';\n\nimport { I18n } from \"@lingui/react\";\nimport { Trans } from '@lingui/macro';\n\nclass Node extends Component {\n  render() {\n    // TODO: Use loadingNode\n    const { loadingNode, mcu, node, nodeError } = this.props;\n\n    // If less memory than 500 MB, return Alert and prevent page load\n    if (mcu && mcu.stats && mcu.stats.memory && mcu.stats.memory.total && mcu.stats.memory.total < 500000) {\n      return (\n        <div ref='main'>\n          <Alert color='warning'>There is a problem fetching system stats (<b>MCU must have at least 512 MB of memory to view this page</b>)</Alert>\n        </div>\n      )\n    }\n\n    // Something is very wrong and likely not loading error\n    if (nodeError) {\n      return (\n        <div ref='main'>\n          <Alert color='warning'>There is a problem fetching system stats (<b>{nodeError}</b>)</Alert>\n        </div>\n      )\n    } else if (node && node.stats && node.stats.error) {\n      // Handle loading errors (e.g., Litecoin client off, loading, etc.)\n      let loadingErrorMessage = null\n      // If Litecoin client off, display constant message\n      if (node.stats.error.code === 'ECONNREFUSED') {\n        loadingErrorMessage = 'Node is currently offline'\n      } else if (node.stats.error.code === '-28') {\n        loadingErrorMessage = 'Node is currently loading'\n      } else {\n        // Every other loading error\n        loadingErrorMessage = node.stats.error.message\n      }\n\n      return (\n        <div ref='main'>\n          <Alert color='warning'>There is a problem fetching system stats (<b>{loadingErrorMessage}</b>)</Alert>\n        </div>\n      )\n    }\n\n    return (\n      <div ref='main'>\n        <div className='animated fadeIn'>\n          <Row>\n            <Col xs='12' md='6'>\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{node.stats.blockCount}</div>\n                  <div><Trans>Blocks</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs='12' md='6'>\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{node.stats.connectionCount}</div>\n                  <div><Trans>Connections</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <h4><Trans>Connections</Trans></h4>\n              <div>\n                <I18n>\n                  {({ i18n }) => (\n                    <Table responsive className=\"table-outline d-table d-sm-table\">\n                      <thead className=\"bg-light\">\n                        <tr>\n                          <th><Trans>IP</Trans></th>\n                          <th><Trans>Client</Trans></th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white\">\n                        {node.stats.peerInfo.map(function(peer, index) {\n                          return (\n                            <tr key={index}>\n                              <td>\n                                <div className=\"font-weight-bold text-muted\">{peer.addr}</div>\n                              </td>\n                              <td>\n                                {peer.subver}\n                              </td>\n                            </tr>\n                          )\n                        })}\n                      </tbody>\n                    </Table>\n                  )}\n                </I18n>\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loadingNode: state.nodeStats.loading,\n    mcu: state.mcuStats.data,\n    node: state.nodeStats.data,\n    nodeError: state.nodeStats.error\n  }\n};\n\nexport default connect(mapStateToProps)(Node);\n","import Node from './Node'\n\nexport default Node\n"],"sourceRoot":""}