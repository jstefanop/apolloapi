{"version":3,"sources":["views/Node/Node.js","views/Node/index.js"],"names":["Node","_this$props","this","props","node","loadingNode","nodeError","react_default","a","createElement","ref","reactstrap_es","color","stats","error","loadingErrorMessage","code","message","className","xs","md","blockCount","_lingui_react","id","connectionCount","_ref","i18n","responsive","peerInfo","map","peer","index","key","addr","subver","Component","connect","state","nodeStats","loading","data"],"mappings":"kLAcMA,mLACK,IAAAC,EAEkCC,KAAKC,MAAzBC,GAFdH,EAECI,YAFDJ,EAEcG,MAAME,EAFpBL,EAEoBK,UAG3B,GAAIA,EACF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAI,QACPH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,MAAM,WAAb,6CAAiEL,EAAAC,EAAAC,cAAA,SAAIH,GAArE,MAGC,GAAIF,GAAQA,EAAKS,OAAST,EAAKS,MAAMC,MAAO,CAEjD,IAAIC,EAAsB,KAW1B,OAREA,EAD4B,iBAA1BX,EAAKS,MAAMC,MAAME,KACG,4BACa,QAA1BZ,EAAKS,MAAMC,MAAME,KACJ,4BAGAZ,EAAKS,MAAMC,MAAMG,QAIvCV,EAAAC,EAAAC,cAAA,OAAKC,IAAI,QACPH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,MAAM,WAAb,6CAAiEL,EAAAC,EAAAC,cAAA,SAAIM,GAArE,MAKN,OACER,EAAAC,EAAAC,cAAA,OAAKC,IAAI,QACPH,EAAAC,EAAAC,cAAA,OAAKS,UAAU,mBACbX,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAG,KAAKC,GAAG,KACdb,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMO,UAAU,YACdX,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,UAAUd,EAAKS,MAAMQ,YACpCd,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACa,EAAA,MAAD,CAAAC,GAAA,eAKXhB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKQ,GAAG,KAAKC,GAAG,KACdb,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMO,UAAU,YACdX,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,UAAUd,EAAKS,MAAMW,iBACpCjB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACa,EAAA,MAAD,CAAAC,GAAA,qBAMbhB,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACa,EAAA,MAAD,CAAAC,GAAA,iBACJhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACa,EAAA,KAAD,KACG,SAAAG,KAAGC,KAAH,OACCnB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOgB,YAAU,EAACT,UAAU,oCAC1BX,EAAAC,EAAAC,cAAA,SAAOS,UAAU,YACfX,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACa,EAAA,MAAD,CAAAC,GAAA,QACJhB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACa,EAAA,MAAD,CAAAC,GAAA,cAGRhB,EAAAC,EAAAC,cAAA,SAAOS,UAAU,YACdd,EAAKS,MAAMe,SAASC,IAAI,SAASC,EAAMC,GACtC,OACExB,EAAAC,EAAAC,cAAA,MAAIuB,IAAKD,GACPxB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,+BAA+BY,EAAKG,OAErD1B,EAAAC,EAAAC,cAAA,UACGqB,EAAKI,2BA5EnBC,aAsGJC,oBARS,SAACC,GACvB,MAAO,CACLhC,YAAagC,EAAMC,UAAUC,QAC7BnC,KAAMiC,EAAMC,UAAUE,KACtBlC,UAAW+B,EAAMC,UAAUxB,QAIhBsB,CAAyBpC,GClHzBA","file":"static/js/4.575b69cd.chunk.js","sourcesContent":["import { connect } from 'react-redux'\nimport React, { Component } from 'react';\nimport {\n  Alert,\n  Card,\n  CardBody,\n  Col,\n  Row,\n  Table\n} from 'reactstrap';\n\nimport { I18n } from \"@lingui/react\";\nimport { Trans } from '@lingui/macro';\n\nclass Node extends Component {\n  render() {\n    // TODO: Use loadingNode\n    const { loadingNode, node, nodeError } = this.props;\n\n    // Something is very wrong and likely not loading error\n    if (nodeError) {\n      return (\n        <div ref='main'>\n          <Alert color='warning'>There is a problem fetching system stats (<b>{nodeError}</b>)</Alert>\n        </div>\n      )\n    } else if (node && node.stats && node.stats.error) {\n      // Handle loading errors (e.g., Litecoin client off, loading, etc.)\n      let loadingErrorMessage = null\n      // If Litecoin client off, display constant message\n      if (node.stats.error.code === 'ECONNREFUSED') {\n        loadingErrorMessage = 'Node is currently offline'\n      } else if (node.stats.error.code === '-28') {\n        loadingErrorMessage = 'Node is currently loading'\n      } else {\n        // Every other loading error\n        loadingErrorMessage = node.stats.error.message\n      }\n\n      return (\n        <div ref='main'>\n          <Alert color='warning'>There is a problem fetching system stats (<b>{loadingErrorMessage}</b>)</Alert>\n        </div>\n      )\n    }\n\n    return (\n      <div ref='main'>\n        <div className='animated fadeIn'>\n          <Row>\n            <Col xs='12' md='6'>\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{node.stats.blockCount}</div>\n                  <div><Trans>Blocks</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n\n            <Col xs='12' md='6'>\n              <Card className=\"bg-light\">\n                <CardBody>\n                  <div className=\"h4 m-0\">{node.stats.connectionCount}</div>\n                  <div><Trans>Connections</Trans></div>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <h4><Trans>Connections</Trans></h4>\n              <div>\n                <I18n>\n                  {({ i18n }) => (\n                    <Table responsive className=\"table-outline d-table d-sm-table\">\n                      <thead className=\"bg-light\">\n                        <tr>\n                          <th><Trans>IP</Trans></th>\n                          <th><Trans>Client</Trans></th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white\">\n                        {node.stats.peerInfo.map(function(peer, index) {\n                          return (\n                            <tr key={index}>\n                              <td>\n                                <div className=\"font-weight-bold text-muted\">{peer.addr}</div>\n                              </td>\n                              <td>\n                                {peer.subver}\n                              </td>\n                            </tr>\n                          )\n                        })}\n                      </tbody>\n                    </Table>\n                  )}\n                </I18n>\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loadingNode: state.nodeStats.loading,\n    node: state.nodeStats.data,\n    nodeError: state.nodeStats.error\n  }\n};\n\nexport default connect(mapStateToProps)(Node);\n","import Node from './Node'\n\nexport default Node\n"],"sourceRoot":""}